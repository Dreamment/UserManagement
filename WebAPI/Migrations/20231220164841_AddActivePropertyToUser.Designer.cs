// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.EFCore;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231220164841_AddActivePropertyToUser")]
    partial class AddActivePropertyToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeoId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("004e02be-e4b1-4142-a5e1-60beb04c4935"),
                            City = "Gwenborough",
                            GeoId = new Guid("1f79d909-5e5f-4d3a-adc1-3f30ba1c525e"),
                            Street = "Kulas Light",
                            Suite = "Apt. 556",
                            Zipcode = "92998-3874"
                        },
                        new
                        {
                            Id = new Guid("251cf8fc-e856-42c1-a350-c750f903626a"),
                            City = "Wisokyburgh",
                            GeoId = new Guid("17ef778c-7c4a-43ce-8d25-5ca8dcdc4c59"),
                            Street = "Victor Plains",
                            Suite = "Suite 879",
                            Zipcode = "90566-7771"
                        },
                        new
                        {
                            Id = new Guid("5a97f2a0-0f13-491b-8dfd-80137e0d52a5"),
                            City = "McKenziehaven",
                            GeoId = new Guid("2713f4d8-332a-47c5-be9c-bd03f91b07d0"),
                            Street = "Douglas Extension",
                            Suite = "Suite 847",
                            Zipcode = "59590-4157"
                        },
                        new
                        {
                            Id = new Guid("2c000474-4756-4b8f-8f93-c54c6f920aab"),
                            City = "South Elvis",
                            GeoId = new Guid("a020eb31-b11d-4559-9acb-6d10ac9118d0"),
                            Street = "Hoeger Mall",
                            Suite = "Apt. 692",
                            Zipcode = "53919-4257"
                        },
                        new
                        {
                            Id = new Guid("817cff63-6991-4b18-88a0-9af9d19ecf8c"),
                            City = "Roscoeview",
                            GeoId = new Guid("da00e42a-ce87-46c1-86c2-6a51408f77de"),
                            Street = "Skiles Walks",
                            Suite = "Suite 351",
                            Zipcode = "33263"
                        },
                        new
                        {
                            Id = new Guid("0d18742c-8b4e-4827-8fbe-51be5fde36ac"),
                            City = "South Christy",
                            GeoId = new Guid("a5cede74-8b08-42b7-b9ff-066f1912cbfa"),
                            Street = "Norberto Crossing",
                            Suite = "Apt. 950",
                            Zipcode = "23505-1337"
                        },
                        new
                        {
                            Id = new Guid("7e418a92-a791-40c3-8d90-be19edab6534"),
                            City = "Howemouth",
                            GeoId = new Guid("491874bb-3c68-42ba-9bc1-2f8cd0db616f"),
                            Street = "Rex Trail",
                            Suite = "Suite 280",
                            Zipcode = "58804-1099"
                        },
                        new
                        {
                            Id = new Guid("95c235d2-802f-4bea-a1f7-a1d21d534501"),
                            City = "Aliyaview",
                            GeoId = new Guid("b4304363-58e8-455c-9359-76e1e7d70271"),
                            Street = "Ellsworth Summit",
                            Suite = "Suite 729",
                            Zipcode = "45169"
                        },
                        new
                        {
                            Id = new Guid("dc92bada-6f54-49ad-8244-76f7af5b9a06"),
                            City = "Bartholomebury",
                            GeoId = new Guid("49882fb1-b7ac-421a-a5d4-f701c0a507fb"),
                            Street = "Dayna Park",
                            Suite = "Suite 449",
                            Zipcode = "76495-3109"
                        },
                        new
                        {
                            Id = new Guid("00763e57-9f60-4000-aba0-dd0ebd2ebc61"),
                            City = "Lebsackbury",
                            GeoId = new Guid("d3cb7fe1-9635-4735-935b-cfcb28be72ae"),
                            Street = "Kattie Turnpike",
                            Suite = "Suite 198",
                            Zipcode = "31428-2261"
                        });
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatchPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9055fd5d-fdd9-4a77-a4aa-77526608c694"),
                            Bs = "harness real-time e-markets",
                            CatchPhrase = "Multi-layered client-server neural-net",
                            Name = "Romaguera-Crona"
                        },
                        new
                        {
                            Id = new Guid("933520b7-4ca0-4964-889a-2e0d9a912957"),
                            Bs = "synergize scalable supply-chains",
                            CatchPhrase = "Proactive didactic contingency",
                            Name = "Deckow-Crist"
                        },
                        new
                        {
                            Id = new Guid("9131144e-26f4-4929-b2a8-a6e34eba41c4"),
                            Bs = "e-enable strategic applications",
                            CatchPhrase = "Face to face bifurcated interface",
                            Name = "Romaguera-Jacobson"
                        },
                        new
                        {
                            Id = new Guid("a041055c-1b55-4d38-bb0c-ff49fafe5940"),
                            Bs = "transition cutting-edge web services",
                            CatchPhrase = "Multi-tiered zero tolerance productivity",
                            Name = "Robel-Corkery"
                        },
                        new
                        {
                            Id = new Guid("1a19a1d2-bb42-47bd-baa4-16aae89bd01b"),
                            Bs = "revolutionize end-to-end systems",
                            CatchPhrase = "User-centric fault-tolerant solution",
                            Name = "Keebler LLC"
                        },
                        new
                        {
                            Id = new Guid("536ec356-e3b6-4c13-88ae-69749efc13df"),
                            Bs = "e-enable innovative applications",
                            CatchPhrase = "Synchronised bottom-line interface",
                            Name = "Considine-Lockman"
                        },
                        new
                        {
                            Id = new Guid("522aa724-91e7-4ec7-8b9d-99cf601e4d75"),
                            Bs = "generate enterprise e-tailers",
                            CatchPhrase = "Configurable multimedia task-force",
                            Name = "Johns Group"
                        },
                        new
                        {
                            Id = new Guid("5d809fbf-fe13-4b07-81b4-65cdf3aa25f8"),
                            Bs = "e-enable extensible e-tailers",
                            CatchPhrase = "Implemented secondary concept",
                            Name = "Abernathy Group"
                        },
                        new
                        {
                            Id = new Guid("2791a504-0e21-4ca8-8017-9feb0b7c1737"),
                            Bs = "aggregate real-time technologies",
                            CatchPhrase = "Switchable contextually-based project",
                            Name = "Yost and Sons"
                        },
                        new
                        {
                            Id = new Guid("7a1c1f3f-77c7-480d-94b2-a0e816eebae2"),
                            Bs = "target end-to-end models",
                            CatchPhrase = "Centralized empowering task-force",
                            Name = "Hoeger LLC"
                        });
                });

            modelBuilder.Entity("Entities.Models.Geo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Geos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f79d909-5e5f-4d3a-adc1-3f30ba1c525e"),
                            Lat = "-37.3159",
                            Lng = "81.1496"
                        },
                        new
                        {
                            Id = new Guid("17ef778c-7c4a-43ce-8d25-5ca8dcdc4c59"),
                            Lat = "-43.9509",
                            Lng = "-34.4618"
                        },
                        new
                        {
                            Id = new Guid("2713f4d8-332a-47c5-be9c-bd03f91b07d0"),
                            Lat = "-68.6102",
                            Lng = "-47.0653"
                        },
                        new
                        {
                            Id = new Guid("a020eb31-b11d-4559-9acb-6d10ac9118d0"),
                            Lat = "29.4572",
                            Lng = "-164.2990"
                        },
                        new
                        {
                            Id = new Guid("da00e42a-ce87-46c1-86c2-6a51408f77de"),
                            Lat = "-31.8129",
                            Lng = "62.5342"
                        },
                        new
                        {
                            Id = new Guid("a5cede74-8b08-42b7-b9ff-066f1912cbfa"),
                            Lat = "-71.4197",
                            Lng = "71.7478"
                        },
                        new
                        {
                            Id = new Guid("491874bb-3c68-42ba-9bc1-2f8cd0db616f"),
                            Lat = "24.8918",
                            Lng = "21.8984"
                        },
                        new
                        {
                            Id = new Guid("b4304363-58e8-455c-9359-76e1e7d70271"),
                            Lat = "-14.3990",
                            Lng = "-120.7677"
                        },
                        new
                        {
                            Id = new Guid("49882fb1-b7ac-421a-a5d4-f701c0a507fb"),
                            Lat = "24.6463",
                            Lng = "-168.8889"
                        },
                        new
                        {
                            Id = new Guid("d3cb7fe1-9635-4735-935b-cfcb28be72ae"),
                            Lat = "-38.2386",
                            Lng = "57.2232"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AddressId = new Guid("004e02be-e4b1-4142-a5e1-60beb04c4935"),
                            CompanyId = new Guid("9055fd5d-fdd9-4a77-a4aa-77526608c694"),
                            ConcurrencyStamp = "d200efea-4689-481f-8804-d7e0ac7f7ab0",
                            Email = "Sincere@april.biz",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Leanne Graham",
                            NormalizedEmail = "SINCERE@APRIL.BIZ",
                            NormalizedUserName = "BRET",
                            PhoneNumber = "1-770-736-8031 x56442",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bret",
                            Website = "hildegard.org"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AddressId = new Guid("251cf8fc-e856-42c1-a350-c750f903626a"),
                            CompanyId = new Guid("933520b7-4ca0-4964-889a-2e0d9a912957"),
                            ConcurrencyStamp = "e52589af-7125-4094-a5f4-ffffd82e9947",
                            Email = "Shanna@melissa.tv",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Ervin Howell",
                            NormalizedEmail = "SHANNA@MELISSA.TV",
                            NormalizedUserName = "ANTONETTE",
                            PhoneNumber = "010-692-6593 x09125",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Antonette",
                            Website = "anastasia.net"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AddressId = new Guid("5a97f2a0-0f13-491b-8dfd-80137e0d52a5"),
                            CompanyId = new Guid("9131144e-26f4-4929-b2a8-a6e34eba41c4"),
                            ConcurrencyStamp = "260b01b7-04f6-4e8b-ac44-e80ef04dc619",
                            Email = "Nathan@yesenia.net",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Clementine Bauch",
                            NormalizedEmail = "NATHAN@YESENIA.NET",
                            NormalizedUserName = "SAMANTHA",
                            PhoneNumber = "1-463-123-4447",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Samantha",
                            Website = "ramiro.info"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AddressId = new Guid("2c000474-4756-4b8f-8f93-c54c6f920aab"),
                            CompanyId = new Guid("a041055c-1b55-4d38-bb0c-ff49fafe5940"),
                            ConcurrencyStamp = "82e84250-11be-4a5b-b8ee-0001fc0608e9",
                            Email = "Julianne.OConner@kory.org",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Patricia Lebsack",
                            NormalizedEmail = "JULIANNE.OCONNER@KORY.ORG",
                            NormalizedUserName = "KARIANNE",
                            PhoneNumber = "493-170-9623 x156",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Karianne",
                            Website = "kale.biz"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AddressId = new Guid("817cff63-6991-4b18-88a0-9af9d19ecf8c"),
                            CompanyId = new Guid("1a19a1d2-bb42-47bd-baa4-16aae89bd01b"),
                            ConcurrencyStamp = "7e65fc53-b5ac-4839-bfe4-fabf4762c1b6",
                            Email = "Lucio_Hettinger@annie.ca",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Chelsey Dietrich",
                            NormalizedEmail = "LUCIO_HETTINGER@ANNIE.CA",
                            NormalizedUserName = "KAMREN",
                            PhoneNumber = "(254)954-1289",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kamren",
                            Website = "demarco.info"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            AddressId = new Guid("0d18742c-8b4e-4827-8fbe-51be5fde36ac"),
                            CompanyId = new Guid("536ec356-e3b6-4c13-88ae-69749efc13df"),
                            ConcurrencyStamp = "60d887b7-ba16-4913-8b31-4e97a9221d87",
                            Email = "Karley_Dach@jasper.info",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Mrs. Dennis Schulist",
                            NormalizedEmail = "KARLEY_DACH@JASPER.INFO",
                            NormalizedUserName = "LEOPOLDO_CORKERY",
                            PhoneNumber = "1-477-935-8478 x6430",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Leopoldo_Corkery",
                            Website = "ola.org"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            AddressId = new Guid("7e418a92-a791-40c3-8d90-be19edab6534"),
                            CompanyId = new Guid("522aa724-91e7-4ec7-8b9d-99cf601e4d75"),
                            ConcurrencyStamp = "eb9528d2-1440-4869-ac8f-5f3acc1dbc53",
                            Email = "Telly.Hoeger@billy.biz",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Kurtis Weissnat",
                            NormalizedEmail = "TELLY.HOEGER@BILLY.BIZ",
                            NormalizedUserName = "ELWYN.SKILES",
                            PhoneNumber = "210.067.6132",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Elwyn.Skiles",
                            Website = "elvis.io"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            AddressId = new Guid("95c235d2-802f-4bea-a1f7-a1d21d534501"),
                            CompanyId = new Guid("5d809fbf-fe13-4b07-81b4-65cdf3aa25f8"),
                            ConcurrencyStamp = "68e93e5f-5200-41c6-840c-df09acf96efd",
                            Email = "Sherwood@rosamond.me",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Nicholas Runolfsdottir V",
                            NormalizedEmail = "SHERWOOD@ROSAMOND.ME",
                            NormalizedUserName = "MAXIME_NIENOW",
                            PhoneNumber = "586.493.6943 x140",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Maxime_Nienow",
                            Website = "jacynthe.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            AddressId = new Guid("dc92bada-6f54-49ad-8244-76f7af5b9a06"),
                            CompanyId = new Guid("2791a504-0e21-4ca8-8017-9feb0b7c1737"),
                            ConcurrencyStamp = "32f137c7-bc5d-4a46-859f-6b60e7e311f4",
                            Email = "Chaim_McDermott@dana.io",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Glenna Reichert",
                            NormalizedEmail = "CHAIM_MCDERMOTT@DANA.IO",
                            NormalizedUserName = "DELPHINE",
                            PhoneNumber = "(775)976-6794 x41206",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Delphine",
                            Website = "conrad.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            AddressId = new Guid("00763e57-9f60-4000-aba0-dd0ebd2ebc61"),
                            CompanyId = new Guid("7a1c1f3f-77c7-480d-94b2-a0e816eebae2"),
                            ConcurrencyStamp = "3d245b7f-0201-4894-9cfb-458de55286c5",
                            Email = "Rey.Padberg@karina.biz",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Clementina DuBuque",
                            NormalizedEmail = "REY.PADBERG@KARINA.BIZ",
                            NormalizedUserName = "MORIAH.STANTON",
                            PhoneNumber = "024-648-3804",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Moriah.Stanton",
                            Website = "ambrose.net"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "67f5556e-7b96-4d78-b4a0-a75dbe9554a0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.Geo", "Geo")
                        .WithMany()
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Address_Geo");

                    b.Navigation("Geo");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_User_Address");

                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_User_Company");

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
