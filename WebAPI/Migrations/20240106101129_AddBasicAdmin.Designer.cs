// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.EFCore;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240106101129_AddBasicAdmin")]
    partial class AddBasicAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeoId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0910c70a-b4aa-4a9c-8e28-b97485979d7f"),
                            City = "Gwenborough",
                            GeoId = new Guid("62619a2d-c87c-4116-94d7-4a69be339140"),
                            Street = "Kulas Light",
                            Suite = "Apt. 556",
                            Zipcode = "92998-3874"
                        },
                        new
                        {
                            Id = new Guid("b072743a-d394-4d88-875a-47e47c06ccf5"),
                            City = "Wisokyburgh",
                            GeoId = new Guid("d57c2456-76da-43b6-aa6e-b26d7a8ccb4e"),
                            Street = "Victor Plains",
                            Suite = "Suite 879",
                            Zipcode = "90566-7771"
                        },
                        new
                        {
                            Id = new Guid("0c99d7f3-6dc8-460b-9e05-3e1ec47b0929"),
                            City = "McKenziehaven",
                            GeoId = new Guid("d35a1943-1610-4f05-b325-af6959135756"),
                            Street = "Douglas Extension",
                            Suite = "Suite 847",
                            Zipcode = "59590-4157"
                        },
                        new
                        {
                            Id = new Guid("0f56720b-4881-460f-a788-78d864ad81c7"),
                            City = "South Elvis",
                            GeoId = new Guid("81a7794d-5ecd-43fd-9047-71c76c9d3853"),
                            Street = "Hoeger Mall",
                            Suite = "Apt. 692",
                            Zipcode = "53919-4257"
                        },
                        new
                        {
                            Id = new Guid("774f09fc-9295-48ca-9618-dbc9d3421535"),
                            City = "Roscoeview",
                            GeoId = new Guid("ecd005bb-bd07-4807-bd31-43f2349bcd2c"),
                            Street = "Skiles Walks",
                            Suite = "Suite 351",
                            Zipcode = "33263"
                        },
                        new
                        {
                            Id = new Guid("3718365a-687c-4f59-8762-c999d553c7f1"),
                            City = "South Christy",
                            GeoId = new Guid("058eca37-f115-4797-a805-406645e8ebf5"),
                            Street = "Norberto Crossing",
                            Suite = "Apt. 950",
                            Zipcode = "23505-1337"
                        },
                        new
                        {
                            Id = new Guid("ab72f718-1ac6-46cc-8b70-ee415b2f3ad8"),
                            City = "Howemouth",
                            GeoId = new Guid("974d65a1-d035-40c5-8819-5d66f3bebdf9"),
                            Street = "Rex Trail",
                            Suite = "Suite 280",
                            Zipcode = "58804-1099"
                        },
                        new
                        {
                            Id = new Guid("9286aad9-1f37-4bbd-82aa-6ae9426e1fbe"),
                            City = "Aliyaview",
                            GeoId = new Guid("ddcc3991-60cc-414a-b59e-35b9bf52ae69"),
                            Street = "Ellsworth Summit",
                            Suite = "Suite 729",
                            Zipcode = "45169"
                        },
                        new
                        {
                            Id = new Guid("4d4a24f5-d32b-42ec-a108-a54b3827ce10"),
                            City = "Bartholomebury",
                            GeoId = new Guid("15cc4777-6975-47fa-b783-d37121ec3ad4"),
                            Street = "Dayna Park",
                            Suite = "Suite 449",
                            Zipcode = "76495-3109"
                        },
                        new
                        {
                            Id = new Guid("2be410ae-f384-497b-abb7-2437037d87b2"),
                            City = "Lebsackbury",
                            GeoId = new Guid("e09fab4d-5e93-45d1-a094-c4d622e79e64"),
                            Street = "Kattie Turnpike",
                            Suite = "Suite 198",
                            Zipcode = "31428-2261"
                        });
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatchPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89333afb-075b-4094-8ab1-10f99877c6e2"),
                            Bs = "harness real-time e-markets",
                            CatchPhrase = "Multi-layered client-server neural-net",
                            Name = "Romaguera-Crona"
                        },
                        new
                        {
                            Id = new Guid("046680e9-6c16-4149-a339-b8a2fde1eec2"),
                            Bs = "synergize scalable supply-chains",
                            CatchPhrase = "Proactive didactic contingency",
                            Name = "Deckow-Crist"
                        },
                        new
                        {
                            Id = new Guid("f0c05cf2-6819-420f-862b-3c5c3145d5a7"),
                            Bs = "e-enable strategic applications",
                            CatchPhrase = "Face to face bifurcated interface",
                            Name = "Romaguera-Jacobson"
                        },
                        new
                        {
                            Id = new Guid("4bd511ae-00f1-4c53-8b9d-f223d8e393a0"),
                            Bs = "transition cutting-edge web services",
                            CatchPhrase = "Multi-tiered zero tolerance productivity",
                            Name = "Robel-Corkery"
                        },
                        new
                        {
                            Id = new Guid("e344396f-75f6-4ffe-b36b-94fc719a6ca2"),
                            Bs = "revolutionize end-to-end systems",
                            CatchPhrase = "User-centric fault-tolerant solution",
                            Name = "Keebler LLC"
                        },
                        new
                        {
                            Id = new Guid("eb9c89de-69b2-4767-8d3f-5dd2ee13fd4c"),
                            Bs = "e-enable innovative applications",
                            CatchPhrase = "Synchronised bottom-line interface",
                            Name = "Considine-Lockman"
                        },
                        new
                        {
                            Id = new Guid("07873d71-da7b-4d9e-99a2-2a2662ed5d5f"),
                            Bs = "generate enterprise e-tailers",
                            CatchPhrase = "Configurable multimedia task-force",
                            Name = "Johns Group"
                        },
                        new
                        {
                            Id = new Guid("da7c4462-2d01-42c3-8c85-8f0d6acf7a73"),
                            Bs = "e-enable extensible e-tailers",
                            CatchPhrase = "Implemented secondary concept",
                            Name = "Abernathy Group"
                        },
                        new
                        {
                            Id = new Guid("869eb19c-aa3b-472b-be82-3cccb554ec85"),
                            Bs = "aggregate real-time technologies",
                            CatchPhrase = "Switchable contextually-based project",
                            Name = "Yost and Sons"
                        },
                        new
                        {
                            Id = new Guid("9f15e7e3-fefd-4706-b5f8-316ccbe952b5"),
                            Bs = "target end-to-end models",
                            CatchPhrase = "Centralized empowering task-force",
                            Name = "Hoeger LLC"
                        });
                });

            modelBuilder.Entity("Entities.Models.Geo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Geos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62619a2d-c87c-4116-94d7-4a69be339140"),
                            Lat = "-37.3159",
                            Lng = "81.1496"
                        },
                        new
                        {
                            Id = new Guid("d57c2456-76da-43b6-aa6e-b26d7a8ccb4e"),
                            Lat = "-43.9509",
                            Lng = "-34.4618"
                        },
                        new
                        {
                            Id = new Guid("d35a1943-1610-4f05-b325-af6959135756"),
                            Lat = "-68.6102",
                            Lng = "-47.0653"
                        },
                        new
                        {
                            Id = new Guid("81a7794d-5ecd-43fd-9047-71c76c9d3853"),
                            Lat = "29.4572",
                            Lng = "-164.2990"
                        },
                        new
                        {
                            Id = new Guid("ecd005bb-bd07-4807-bd31-43f2349bcd2c"),
                            Lat = "-31.8129",
                            Lng = "62.5342"
                        },
                        new
                        {
                            Id = new Guid("058eca37-f115-4797-a805-406645e8ebf5"),
                            Lat = "-71.4197",
                            Lng = "71.7478"
                        },
                        new
                        {
                            Id = new Guid("974d65a1-d035-40c5-8819-5d66f3bebdf9"),
                            Lat = "24.8918",
                            Lng = "21.8984"
                        },
                        new
                        {
                            Id = new Guid("ddcc3991-60cc-414a-b59e-35b9bf52ae69"),
                            Lat = "-14.3990",
                            Lng = "-120.7677"
                        },
                        new
                        {
                            Id = new Guid("15cc4777-6975-47fa-b783-d37121ec3ad4"),
                            Lat = "24.6463",
                            Lng = "-168.8889"
                        },
                        new
                        {
                            Id = new Guid("e09fab4d-5e93-45d1-a094-c4d622e79e64"),
                            Lat = "-38.2386",
                            Lng = "57.2232"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AddressId = new Guid("0910c70a-b4aa-4a9c-8e28-b97485979d7f"),
                            CompanyId = new Guid("89333afb-075b-4094-8ab1-10f99877c6e2"),
                            ConcurrencyStamp = "84de3806-8a45-4134-9777-bc744e64d12f",
                            Email = "Sincere@april.biz",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Leanne Graham",
                            NormalizedEmail = "SINCERE@APRIL.BIZ",
                            NormalizedUserName = "BRET",
                            PhoneNumber = "1-770-736-8031 x56442",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bret",
                            Website = "hildegard.org"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AddressId = new Guid("b072743a-d394-4d88-875a-47e47c06ccf5"),
                            CompanyId = new Guid("046680e9-6c16-4149-a339-b8a2fde1eec2"),
                            ConcurrencyStamp = "141e4750-7ad6-44c0-ab4f-28e3e8e3c58a",
                            Email = "Shanna@melissa.tv",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Ervin Howell",
                            NormalizedEmail = "SHANNA@MELISSA.TV",
                            NormalizedUserName = "ANTONETTE",
                            PhoneNumber = "010-692-6593 x09125",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Antonette",
                            Website = "anastasia.net"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AddressId = new Guid("0c99d7f3-6dc8-460b-9e05-3e1ec47b0929"),
                            CompanyId = new Guid("f0c05cf2-6819-420f-862b-3c5c3145d5a7"),
                            ConcurrencyStamp = "14352a75-87b2-4ce3-9c55-921ba14cf1c6",
                            Email = "Nathan@yesenia.net",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Clementine Bauch",
                            NormalizedEmail = "NATHAN@YESENIA.NET",
                            NormalizedUserName = "SAMANTHA",
                            PhoneNumber = "1-463-123-4447",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Samantha",
                            Website = "ramiro.info"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AddressId = new Guid("0f56720b-4881-460f-a788-78d864ad81c7"),
                            CompanyId = new Guid("4bd511ae-00f1-4c53-8b9d-f223d8e393a0"),
                            ConcurrencyStamp = "d1faa3f7-86fa-4296-a09b-f8213776169a",
                            Email = "Julianne.OConner@kory.org",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Patricia Lebsack",
                            NormalizedEmail = "JULIANNE.OCONNER@KORY.ORG",
                            NormalizedUserName = "KARIANNE",
                            PhoneNumber = "493-170-9623 x156",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Karianne",
                            Website = "kale.biz"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AddressId = new Guid("774f09fc-9295-48ca-9618-dbc9d3421535"),
                            CompanyId = new Guid("e344396f-75f6-4ffe-b36b-94fc719a6ca2"),
                            ConcurrencyStamp = "e14c0915-2b5e-4fac-866f-d0b9239c6289",
                            Email = "Lucio_Hettinger@annie.ca",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Chelsey Dietrich",
                            NormalizedEmail = "LUCIO_HETTINGER@ANNIE.CA",
                            NormalizedUserName = "KAMREN",
                            PhoneNumber = "(254)954-1289",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kamren",
                            Website = "demarco.info"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            AddressId = new Guid("3718365a-687c-4f59-8762-c999d553c7f1"),
                            CompanyId = new Guid("eb9c89de-69b2-4767-8d3f-5dd2ee13fd4c"),
                            ConcurrencyStamp = "c304e2dd-8aa0-499b-86e6-380302d14d4c",
                            Email = "Karley_Dach@jasper.info",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Mrs. Dennis Schulist",
                            NormalizedEmail = "KARLEY_DACH@JASPER.INFO",
                            NormalizedUserName = "LEOPOLDO_CORKERY",
                            PhoneNumber = "1-477-935-8478 x6430",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Leopoldo_Corkery",
                            Website = "ola.org"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            AddressId = new Guid("ab72f718-1ac6-46cc-8b70-ee415b2f3ad8"),
                            CompanyId = new Guid("07873d71-da7b-4d9e-99a2-2a2662ed5d5f"),
                            ConcurrencyStamp = "bf94e500-9fb2-4663-b891-3d13a2b9da43",
                            Email = "Telly.Hoeger@billy.biz",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Kurtis Weissnat",
                            NormalizedEmail = "TELLY.HOEGER@BILLY.BIZ",
                            NormalizedUserName = "ELWYN.SKILES",
                            PhoneNumber = "210.067.6132",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Elwyn.Skiles",
                            Website = "elvis.io"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            AddressId = new Guid("9286aad9-1f37-4bbd-82aa-6ae9426e1fbe"),
                            CompanyId = new Guid("da7c4462-2d01-42c3-8c85-8f0d6acf7a73"),
                            ConcurrencyStamp = "adc8fa9d-1451-4d8f-b12b-189078f29e10",
                            Email = "Sherwood@rosamond.me",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Nicholas Runolfsdottir V",
                            NormalizedEmail = "SHERWOOD@ROSAMOND.ME",
                            NormalizedUserName = "MAXIME_NIENOW",
                            PhoneNumber = "586.493.6943 x140",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Maxime_Nienow",
                            Website = "jacynthe.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            AddressId = new Guid("4d4a24f5-d32b-42ec-a108-a54b3827ce10"),
                            CompanyId = new Guid("869eb19c-aa3b-472b-be82-3cccb554ec85"),
                            ConcurrencyStamp = "bb78fe16-ab4c-48f9-84a7-bd16d25c9851",
                            Email = "Chaim_McDermott@dana.io",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Glenna Reichert",
                            NormalizedEmail = "CHAIM_MCDERMOTT@DANA.IO",
                            NormalizedUserName = "DELPHINE",
                            PhoneNumber = "(775)976-6794 x41206",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Delphine",
                            Website = "conrad.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            AddressId = new Guid("2be410ae-f384-497b-abb7-2437037d87b2"),
                            CompanyId = new Guid("9f15e7e3-fefd-4706-b5f8-316ccbe952b5"),
                            ConcurrencyStamp = "2fde00bf-4aa6-444f-bbc6-0d48a9bc9240",
                            Email = "Rey.Padberg@karina.biz",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "Clementina DuBuque",
                            NormalizedEmail = "REY.PADBERG@KARINA.BIZ",
                            NormalizedUserName = "MORIAH.STANTON",
                            PhoneNumber = "024-648-3804",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Moriah.Stanton",
                            Website = "ambrose.net"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6c15a4c-75a2-457f-9251-4e6358e8a6eb",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            IsActive = 0,
                            LockoutEnabled = true,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@ADMIN.com",
                            NormalizedUserName = "ADMIN",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2398d6e8-c3d7-48a7-83cc-9a2fce6d4d5a",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "31dec94b-13cd-4fbb-9637-ef8e3fa7d23e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.Geo", "Geo")
                        .WithMany()
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Address_Geo");

                    b.Navigation("Geo");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_User_Address");

                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_User_Company");

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
