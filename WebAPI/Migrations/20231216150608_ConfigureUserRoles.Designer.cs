// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.EFCore;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231216150608_ConfigureUserRoles")]
    partial class ConfigureUserRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GeoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeoId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1ae2ce8-f2d4-4390-95d5-f3ddfb8b6938"),
                            City = "Gwenborough",
                            GeoId = new Guid("80e6edb4-fd1b-4353-875e-d4a93f9aa8aa"),
                            Street = "Kulas Light",
                            Suite = "Apt. 556",
                            Zipcode = "92998-3874"
                        },
                        new
                        {
                            Id = new Guid("2234f5f8-cfac-4b55-9618-d3762c2a3e08"),
                            City = "Wisokyburgh",
                            GeoId = new Guid("24c2bd36-d059-4dff-baa6-b0272a52bba9"),
                            Street = "Victor Plains",
                            Suite = "Suite 879",
                            Zipcode = "90566-7771"
                        },
                        new
                        {
                            Id = new Guid("a41e78b4-b41a-44ff-bd2b-8091c4cb5087"),
                            City = "McKenziehaven",
                            GeoId = new Guid("b9959fc2-6c24-4452-a1b7-31abe21f74e0"),
                            Street = "Douglas Extension",
                            Suite = "Suite 847",
                            Zipcode = "59590-4157"
                        },
                        new
                        {
                            Id = new Guid("eb342bb0-5503-4efe-a932-f8a7639c737a"),
                            City = "South Elvis",
                            GeoId = new Guid("33acbb2f-875f-495f-a211-326bda5a08d8"),
                            Street = "Hoeger Mall",
                            Suite = "Apt. 692",
                            Zipcode = "53919-4257"
                        },
                        new
                        {
                            Id = new Guid("2589074a-33bc-48f2-81db-a5628ce64a84"),
                            City = "Roscoeview",
                            GeoId = new Guid("1d98acc8-31bf-44c8-b68d-b3624a42816d"),
                            Street = "Skiles Walks",
                            Suite = "Suite 351",
                            Zipcode = "33263"
                        },
                        new
                        {
                            Id = new Guid("d24276be-d4fb-43b2-89e5-ffe158402430"),
                            City = "South Christy",
                            GeoId = new Guid("a39fc932-a76f-4a88-acda-e825505f3040"),
                            Street = "Norberto Crossing",
                            Suite = "Apt. 950",
                            Zipcode = "23505-1337"
                        },
                        new
                        {
                            Id = new Guid("16531efc-d321-4ac1-b99a-227d515ceec9"),
                            City = "Howemouth",
                            GeoId = new Guid("78d89c6e-a455-4242-a52b-ca7f24beca7b"),
                            Street = "Rex Trail",
                            Suite = "Suite 280",
                            Zipcode = "58804-1099"
                        },
                        new
                        {
                            Id = new Guid("c49425a5-f1e5-49f1-a192-384a9c2264a1"),
                            City = "Aliyaview",
                            GeoId = new Guid("4098128c-9973-49e0-963a-35dc3a047772"),
                            Street = "Ellsworth Summit",
                            Suite = "Suite 729",
                            Zipcode = "45169"
                        },
                        new
                        {
                            Id = new Guid("6f609d2b-9a33-4639-8868-f256ca902f4c"),
                            City = "Bartholomebury",
                            GeoId = new Guid("e4aafd82-92df-4e95-b3db-88905c650434"),
                            Street = "Dayna Park",
                            Suite = "Suite 449",
                            Zipcode = "76495-3109"
                        },
                        new
                        {
                            Id = new Guid("bde87c73-f5a3-4734-bc35-e0729829dea8"),
                            City = "Lebsackbury",
                            GeoId = new Guid("f9d1569c-8ced-4a2b-be95-20988b6ee218"),
                            Street = "Kattie Turnpike",
                            Suite = "Suite 198",
                            Zipcode = "31428-2261"
                        });
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatchPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("edca34c9-f180-4e41-8960-201a6b027c95"),
                            Bs = "harness real-time e-markets",
                            CatchPhrase = "Multi-layered client-server neural-net",
                            Name = "Romaguera-Crona"
                        },
                        new
                        {
                            Id = new Guid("3b5401cb-8b0d-4fc2-92c1-020661ab2937"),
                            Bs = "synergize scalable supply-chains",
                            CatchPhrase = "Proactive didactic contingency",
                            Name = "Deckow-Crist"
                        },
                        new
                        {
                            Id = new Guid("7aea4ff5-2dcb-4f6b-90af-42c6cc04d4bc"),
                            Bs = "e-enable strategic applications",
                            CatchPhrase = "Face to face bifurcated interface",
                            Name = "Romaguera-Jacobson"
                        },
                        new
                        {
                            Id = new Guid("74b4b940-fc62-4aa7-9ca6-9f5f19b4309d"),
                            Bs = "transition cutting-edge web services",
                            CatchPhrase = "Multi-tiered zero tolerance productivity",
                            Name = "Robel-Corkery"
                        },
                        new
                        {
                            Id = new Guid("ef55ba32-b66d-42c3-888d-3e4c42f37d33"),
                            Bs = "revolutionize end-to-end systems",
                            CatchPhrase = "User-centric fault-tolerant solution",
                            Name = "Keebler LLC"
                        },
                        new
                        {
                            Id = new Guid("157834d1-ce68-425b-95e8-e66721eeafa6"),
                            Bs = "e-enable innovative applications",
                            CatchPhrase = "Synchronised bottom-line interface",
                            Name = "Considine-Lockman"
                        },
                        new
                        {
                            Id = new Guid("da8d0761-1ac8-4a48-9c97-b5e51ac07638"),
                            Bs = "generate enterprise e-tailers",
                            CatchPhrase = "Configurable multimedia task-force",
                            Name = "Johns Group"
                        },
                        new
                        {
                            Id = new Guid("71f929d8-8710-4d96-a07b-b2b11d1e3659"),
                            Bs = "e-enable extensible e-tailers",
                            CatchPhrase = "Implemented secondary concept",
                            Name = "Abernathy Group"
                        },
                        new
                        {
                            Id = new Guid("5a74e90b-f29c-41e8-a1fe-5ae32a315fdc"),
                            Bs = "aggregate real-time technologies",
                            CatchPhrase = "Switchable contextually-based project",
                            Name = "Yost and Sons"
                        },
                        new
                        {
                            Id = new Guid("55a1bb83-4afc-46c2-b0ec-ff0e54662f3c"),
                            Bs = "target end-to-end models",
                            CatchPhrase = "Centralized empowering task-force",
                            Name = "Hoeger LLC"
                        });
                });

            modelBuilder.Entity("Entities.Models.Geo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Geos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80e6edb4-fd1b-4353-875e-d4a93f9aa8aa"),
                            Lat = "-37.3159",
                            Lng = "81.1496"
                        },
                        new
                        {
                            Id = new Guid("24c2bd36-d059-4dff-baa6-b0272a52bba9"),
                            Lat = "-43.9509",
                            Lng = "-34.4618"
                        },
                        new
                        {
                            Id = new Guid("b9959fc2-6c24-4452-a1b7-31abe21f74e0"),
                            Lat = "-68.6102",
                            Lng = "-47.0653"
                        },
                        new
                        {
                            Id = new Guid("33acbb2f-875f-495f-a211-326bda5a08d8"),
                            Lat = "29.4572",
                            Lng = "-164.2990"
                        },
                        new
                        {
                            Id = new Guid("1d98acc8-31bf-44c8-b68d-b3624a42816d"),
                            Lat = "-31.8129",
                            Lng = "62.5342"
                        },
                        new
                        {
                            Id = new Guid("a39fc932-a76f-4a88-acda-e825505f3040"),
                            Lat = "-71.4197",
                            Lng = "71.7478"
                        },
                        new
                        {
                            Id = new Guid("78d89c6e-a455-4242-a52b-ca7f24beca7b"),
                            Lat = "24.8918",
                            Lng = "21.8984"
                        },
                        new
                        {
                            Id = new Guid("4098128c-9973-49e0-963a-35dc3a047772"),
                            Lat = "-14.3990",
                            Lng = "-120.7677"
                        },
                        new
                        {
                            Id = new Guid("e4aafd82-92df-4e95-b3db-88905c650434"),
                            Lat = "24.6463",
                            Lng = "-168.8889"
                        },
                        new
                        {
                            Id = new Guid("f9d1569c-8ced-4a2b-be95-20988b6ee218"),
                            Lat = "-38.2386",
                            Lng = "57.2232"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AddressId = new Guid("c1ae2ce8-f2d4-4390-95d5-f3ddfb8b6938"),
                            CompanyId = new Guid("edca34c9-f180-4e41-8960-201a6b027c95"),
                            ConcurrencyStamp = "1556a952-bcb2-4cfb-b40f-6a17b81ee319",
                            Email = "Sincere@april.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Leanne Graham",
                            NormalizedEmail = "SINCERE@APRIL.BIZ",
                            NormalizedUserName = "BRET",
                            PhoneNumber = "1-770-736-8031 x56442",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bret",
                            Website = "hildegard.org"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AddressId = new Guid("2234f5f8-cfac-4b55-9618-d3762c2a3e08"),
                            CompanyId = new Guid("3b5401cb-8b0d-4fc2-92c1-020661ab2937"),
                            ConcurrencyStamp = "3bd0e8de-56c8-45df-addb-feeb6e8cc8a1",
                            Email = "Shanna@melissa.tv",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Ervin Howell",
                            NormalizedEmail = "SHANNA@MELISSA.TV",
                            NormalizedUserName = "ANTONETTE",
                            PhoneNumber = "010-692-6593 x09125",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Antonette",
                            Website = "anastasia.net"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            AddressId = new Guid("a41e78b4-b41a-44ff-bd2b-8091c4cb5087"),
                            CompanyId = new Guid("7aea4ff5-2dcb-4f6b-90af-42c6cc04d4bc"),
                            ConcurrencyStamp = "b059469c-e2e6-412b-814e-704c72804a13",
                            Email = "Nathan@yesenia.net",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Clementine Bauch",
                            NormalizedEmail = "NATHAN@YESENIA.NET",
                            NormalizedUserName = "SAMANTHA",
                            PhoneNumber = "1-463-123-4447",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Samantha",
                            Website = "ramiro.info"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            AddressId = new Guid("eb342bb0-5503-4efe-a932-f8a7639c737a"),
                            CompanyId = new Guid("74b4b940-fc62-4aa7-9ca6-9f5f19b4309d"),
                            ConcurrencyStamp = "1b2da2eb-959d-4726-a2c6-6ce8f09e6cda",
                            Email = "Julianne.OConner@kory.org",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Patricia Lebsack",
                            NormalizedEmail = "JULIANNE.OCONNER@KORY.ORG",
                            NormalizedUserName = "KARIANNE",
                            PhoneNumber = "493-170-9623 x156",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Karianne",
                            Website = "kale.biz"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            AddressId = new Guid("2589074a-33bc-48f2-81db-a5628ce64a84"),
                            CompanyId = new Guid("ef55ba32-b66d-42c3-888d-3e4c42f37d33"),
                            ConcurrencyStamp = "43c396e4-3b7f-454b-857d-618301ed7fb5",
                            Email = "Lucio_Hettinger@annie.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Chelsey Dietrich",
                            NormalizedEmail = "LUCIO_HETTINGER@ANNIE.CA",
                            NormalizedUserName = "KAMREN",
                            PhoneNumber = "(254)954-1289",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kamren",
                            Website = "demarco.info"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            AddressId = new Guid("d24276be-d4fb-43b2-89e5-ffe158402430"),
                            CompanyId = new Guid("157834d1-ce68-425b-95e8-e66721eeafa6"),
                            ConcurrencyStamp = "fd0a0bb6-3172-46c6-a76f-12399e2c6334",
                            Email = "Karley_Dach@jasper.info",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Mrs. Dennis Schulist",
                            NormalizedEmail = "KARLEY_DACH@JASPER.INFO",
                            NormalizedUserName = "LEOPOLDO_CORKERY",
                            PhoneNumber = "1-477-935-8478 x6430",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Leopoldo_Corkery",
                            Website = "ola.org"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            AddressId = new Guid("16531efc-d321-4ac1-b99a-227d515ceec9"),
                            CompanyId = new Guid("da8d0761-1ac8-4a48-9c97-b5e51ac07638"),
                            ConcurrencyStamp = "8d7b8c9c-3870-4340-9229-b1865b89f2f9",
                            Email = "Telly.Hoeger@billy.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Kurtis Weissnat",
                            NormalizedEmail = "TELLY.HOEGER@BILLY.BIZ",
                            NormalizedUserName = "ELWYN.SKILES",
                            PhoneNumber = "210.067.6132",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Elwyn.Skiles",
                            Website = "elvis.io"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            AddressId = new Guid("c49425a5-f1e5-49f1-a192-384a9c2264a1"),
                            CompanyId = new Guid("71f929d8-8710-4d96-a07b-b2b11d1e3659"),
                            ConcurrencyStamp = "bc9f2952-3659-41b4-bf7c-801dbc403292",
                            Email = "Sherwood@rosamond.me",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Nicholas Runolfsdottir V",
                            NormalizedEmail = "SHERWOOD@ROSAMOND.ME",
                            NormalizedUserName = "MAXIME_NIENOW",
                            PhoneNumber = "586.493.6943 x140",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Maxime_Nienow",
                            Website = "jacynthe.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            AddressId = new Guid("6f609d2b-9a33-4639-8868-f256ca902f4c"),
                            CompanyId = new Guid("5a74e90b-f29c-41e8-a1fe-5ae32a315fdc"),
                            ConcurrencyStamp = "16ef5131-be98-43ee-b77d-32c0775b139d",
                            Email = "Chaim_McDermott@dana.io",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Glenna Reichert",
                            NormalizedEmail = "CHAIM_MCDERMOTT@DANA.IO",
                            NormalizedUserName = "DELPHINE",
                            PhoneNumber = "(775)976-6794 x41206",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Delphine",
                            Website = "conrad.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            AddressId = new Guid("bde87c73-f5a3-4734-bc35-e0729829dea8"),
                            CompanyId = new Guid("55a1bb83-4afc-46c2-b0ec-ff0e54662f3c"),
                            ConcurrencyStamp = "dbed9222-4cee-4c34-abf2-e265a62eba63",
                            Email = "Rey.Padberg@karina.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Clementina DuBuque",
                            NormalizedEmail = "REY.PADBERG@KARINA.BIZ",
                            NormalizedUserName = "MORIAH.STANTON",
                            PhoneNumber = "024-648-3804",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Moriah.Stanton",
                            Website = "ambrose.net"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "dab55e26-8f87-47fa-b1d8-72e18ec55503",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.Geo", "Geo")
                        .WithMany("Addresses")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Address_Geo");

                    b.Navigation("Geo");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_User_Address");

                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_User_Company");

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.Geo", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
